{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@app/_services\";\nexport let AuthGuard = /*#__PURE__*/(() => {\n  class AuthGuard {\n    constructor(router, accountService) {\n      this.router = router;\n      this.accountService = accountService;\n    }\n    canActivate(route, state) {\n      const account = this.accountService.accountValue;\n      if (account) {\n        // check if route is restricted by role\n        if (route.data.roles && !route.data.roles.includes(account.role)) {\n          // role not authorized so redirect to home page\n          this.router.navigate(['/']);\n          return false;\n        }\n        // authorized so return true\n        return true;\n      }\n      // not logged in so redirect to login page with the return url\n      this.router.navigate(['/account/login'], {\n        queryParams: {\n          returnUrl: state.url\n        }\n      });\n      return false;\n    }\n  }\n  AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AccountService));\n  };\n  AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthGuard;\n})();","map":{"version":3,"mappings":";;;AAMA,WAAaA,SAAS;EAAhB,MAAOA,SAAS;IAClBC,YACYC,MAAc,EACdC,cAA8B;MAD9B,WAAM,GAAND,MAAM;MACN,mBAAc,GAAdC,cAAc;IACtB;IAEJC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;MACjE,MAAMC,OAAO,GAAG,IAAI,CAACJ,cAAc,CAACK,YAAY;MAChD,IAAID,OAAO,EAAE;QACT;QACA,IAAIF,KAAK,CAACI,IAAI,CAACC,KAAK,IAAI,CAACL,KAAK,CAACI,IAAI,CAACC,KAAK,CAACC,QAAQ,CAACJ,OAAO,CAACK,IAAI,CAAC,EAAE;UAC9D;UACA,IAAI,CAACV,MAAM,CAACW,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;UAC3B,OAAO,KAAK;;QAEhB;QACA,OAAO,IAAI;;MAEf;MACA,IAAI,CAACX,MAAM,CAACW,QAAQ,CAAC,CAAC,gBAAgB,CAAC,EAAE;QAAEC,WAAW,EAAE;UAAEC,SAAS,EAAET,KAAK,CAACU;QAAG;MAAE,CAAE,CAAC;MACnF,OAAO,KAAK;IAChB;;;qBArBShB,SAAS;EAAA;;WAATA,SAAS;IAAAiB,SAATjB,SAAS;IAAAkB,YADI;EAAM;EAAA,OACnBlB,SAAS;AAAA","names":["AuthGuard","constructor","router","accountService","canActivate","route","state","account","accountValue","data","roles","includes","role","navigate","queryParams","returnUrl","url","factory","providedIn"],"sourceRoot":"","sources":["D:\\user-management-system\\client\\src\\app\\_helpers\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\n\r\nimport { AccountService } from '@app/_services';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthGuard {\r\n    constructor(\r\n        private router: Router,\r\n        private accountService: AccountService\r\n    ) { }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n        const account = this.accountService.accountValue;\r\n        if (account) {\r\n            // check if route is restricted by role\r\n            if (route.data.roles && !route.data.roles.includes(account.role)) {\r\n                // role not authorized so redirect to home page\r\n                this.router.navigate(['/']);\r\n                return false;\r\n            }\r\n            // authorized so return true\r\n            return true;\r\n        }\r\n        // not logged in so redirect to login page with the return url\r\n        this.router.navigate(['/account/login'], { queryParams: { returnUrl: state.url } });\r\n        return false;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}