{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { MustMatch } from '@app/_helpers';\nlet RegisterComponent = class RegisterComponent {\n  constructor(formBuilder, route, router, accountService, alertService) {\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.router = router;\n    this.accountService = accountService;\n    this.alertService = alertService;\n    this.loading = false;\n    this.submitted = false;\n  }\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      title: ['', Validators.required],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', Validators.required],\n      acceptTerms: [false, Validators.requiredTrue]\n    }, {\n      validator: MustMatch('password', 'confirmPassword')\n    });\n  }\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.form.controls;\n  }\n  onSubmit() {\n    this.submitted = true;\n    // reset alerts on submit\n    this.alertService.clear();\n    // stop here if form is invalid\n    if (this.form.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.accountService.register(this.form.value).pipe(first()).subscribe({\n      next: () => {\n        this.alertService.success('Registration successful, please check your email for verification instructions', {\n          keepAfterRouteChange: true\n        });\n        this.router.navigate(['../login'], {\n          relativeTo: this.route\n        });\n      },\n      error: error => {\n        this.alertService.error(error);\n        this.loading = false;\n      }\n    });\n  }\n};\nRegisterComponent = __decorate([Component({\n  templateUrl: 'register.component.html'\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAEjD,SAA+CC,UAAU,QAAQ,gBAAgB;AACjF,SAASC,KAAK,QAAQ,gBAAgB;AAGtC,SAASC,SAAS,QAAQ,eAAe;AAGlC,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAK1BC,YACYC,WAA+B,EAC/BC,KAAqB,EACrBC,MAAc,EACdC,cAA8B,EAC9BC,YAA0B;IAJ1B,gBAAW,GAAXJ,WAAW;IACX,UAAK,GAALC,KAAK;IACL,WAAM,GAANC,MAAM;IACN,mBAAc,GAAdC,cAAc;IACd,iBAAY,GAAZC,YAAY;IARxB,YAAO,GAAG,KAAK;IACf,cAAS,GAAG,KAAK;EAQb;EAEJC,QAAQ;IACJ,IAAI,CAACC,IAAI,GAAG,IAAI,CAACN,WAAW,CAACO,KAAK,CAAC;MAC/BC,KAAK,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACc,QAAQ,CAAC;MAChCC,SAAS,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACc,QAAQ,CAAC;MACpCE,QAAQ,EAAE,CAAC,EAAE,EAAEhB,UAAU,CAACc,QAAQ,CAAC;MACnCG,KAAK,EAAE,CAAC,EAAE,EAAE,CAACjB,UAAU,CAACc,QAAQ,EAAEd,UAAU,CAACiB,KAAK,CAAC,CAAC;MACpDC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAClB,UAAU,CAACc,QAAQ,EAAEd,UAAU,CAACmB,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9DC,eAAe,EAAE,CAAC,EAAE,EAAEpB,UAAU,CAACc,QAAQ,CAAC;MAC1CO,WAAW,EAAE,CAAC,KAAK,EAAErB,UAAU,CAACsB,YAAY;KAC/C,EAAE;MACCC,SAAS,EAAErB,SAAS,CAAC,UAAU,EAAE,iBAAiB;KACrD,CAAC;EACN;EAEA;EACA,IAAIsB,CAAC;IAAK,OAAO,IAAI,CAACb,IAAI,CAACc,QAAQ;EAAE;EAErCC,QAAQ;IACJ,IAAI,CAACC,SAAS,GAAG,IAAI;IAErB;IACA,IAAI,CAAClB,YAAY,CAACmB,KAAK,EAAE;IAEzB;IACA,IAAI,IAAI,CAACjB,IAAI,CAACkB,OAAO,EAAE;MACnB;;IAGJ,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,IAAI,CAACtB,cAAc,CAACuB,QAAQ,CAAC,IAAI,CAACpB,IAAI,CAACqB,KAAK,CAAC,CACxCC,IAAI,CAAChC,KAAK,EAAE,CAAC,CACbiC,SAAS,CAAC;MACPC,IAAI,EAAE,MAAK;QACP,IAAI,CAAC1B,YAAY,CAAC2B,OAAO,CACrB,gFAAgF,EAChF;UAAEC,oBAAoB,EAAE;QAAI,CAAE,CACjC;QACD,IAAI,CAAC9B,MAAM,CAAC+B,QAAQ,CAAC,CAAC,UAAU,CAAC,EAAE;UAAEC,UAAU,EAAE,IAAI,CAACjC;QAAK,CAAE,CAAC;MAClE,CAAC;MACDkC,KAAK,EAAEA,KAAK,IAAG;QACX,IAAI,CAAC/B,YAAY,CAAC+B,KAAK,CAACA,KAAK,CAAC;QAC9B,IAAI,CAACV,OAAO,GAAG,KAAK;MACxB;KACH,CAAC;EACV;CACH;AA1DY3B,iBAAiB,eAD7BJ,SAAS,CAAC;EAAE0C,WAAW,EAAE;AAAyB,CAAE,CAAC,GACzCtC,iBAAiB,CA0D7B;SA1DYA,iBAAiB","names":["Component","Validators","first","MustMatch","RegisterComponent","constructor","formBuilder","route","router","accountService","alertService","ngOnInit","form","group","title","required","firstName","lastName","email","password","minLength","confirmPassword","acceptTerms","requiredTrue","validator","f","controls","onSubmit","submitted","clear","invalid","loading","register","value","pipe","subscribe","next","success","keepAfterRouteChange","navigate","relativeTo","error","templateUrl"],"sourceRoot":"","sources":["D:\\user-management-system\\client\\src\\app\\account\\register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService } from '@app/_services';\r\nimport { MustMatch } from '@app/_helpers';\r\n\r\n@Component({ templateUrl: 'register.component.html' })\r\nexport class RegisterComponent implements OnInit {\r\n    form: UntypedFormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n\r\n    constructor(\r\n        private formBuilder: UntypedFormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            title: ['', Validators.required],\r\n            firstName: ['', Validators.required],\r\n            lastName: ['', Validators.required],\r\n            email: ['', [Validators.required, Validators.email]],\r\n            password: ['', [Validators.required, Validators.minLength(6)]],\r\n            confirmPassword: ['', Validators.required],\r\n            acceptTerms: [false, Validators.requiredTrue]\r\n        }, {\r\n            validator: MustMatch('password', 'confirmPassword')\r\n        });\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // reset alerts on submit\r\n        this.alertService.clear();\r\n\r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n        this.accountService.register(this.form.value)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success(\r\n                        'Registration successful, please check your email for verification instructions',\r\n                        { keepAfterRouteChange: true }\r\n                    );\r\n                    this.router.navigate(['../login'], { relativeTo: this.route });\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}